#!/usr/bin/env bash

shopt -s nocasematch

workingDir=$(dirname ${BASH_SOURCE[0]})
if [[ -f ${workingDir}/.bash_colors ]]
then
    . ${workingDir}/.bash_colors
fi

currentSlide=1
if [[ $# -eq 1 ]]
then
    nextSlide=$(( $1 + 1 ))
else
    nextSlide=2
fi

function echoWhite() {
    echo -e "${BIWhite}$@${Color_Off}"
}

function setupDemo() {
    mkdir -p $testDir 2> /dev/null
    if [[ -d $testDir ]]
    then
        touch $testFile
        if [[ ! -f $testFile ]]
        then
            echo "ERROR: Unable to create $testFile"
            exit 1
        fi
    else
        echo "ERROR: Unable to mkdir $testDir"
        exit 1
    fi
}

function cleanupDemo() {
    if [[ -d $testDir ]]
    then
        /bin/rm -rf $testDir
    fi
}

function insertLines() {
    echo ""; echo ""; echo ""; echo ""
}

# The message says to start again at $currentSlide - 1 because it is almost
# certain to refer to the correct slide.  There's a very narrow window of time
# when it is not what is wanted; one would have to be incredibly lucky (or
# unlucky) to get a ctrl-c into that interval, and even then, you'd just be
# one slide behind what you wanted.
function gracefulDeath() {
    clear
    insertLines
    echo -ne "${BIWhite}To jump back to this point again, "
    echo -e "run \"${BIGreen}$0" $(( currentSlide - 1 ))"${BIWhite}\"${Color_Off}"
    insertLines
    exit 0
}

# Die gracefully in case of <ctrl>-c
trap gracefulDeath SIGINT

function startSlide() {
    clear
    insertLines
}

function nextSlide() {
    insertLines
    currentSlide=$(( currentSlide + 1 ))
    if [[ $currentSlide -ge $nextSlide ]]
    then
        echoWhite "[ Slide" $(( currentSlide - 1)) "]"
        read quit
        if [[ $quit =~ ^q ]]
        then
            gracefulDeath
        fi
        nextSlide=$(( nextSlide + 1 ))
    fi
    startSlide
}


function chmodAndShow() {
    if [[ $# -eq 2 ]]
    then
        perms=$1
        file=$2
        
        echo -e "chmod ${BIWhite}$perms ${BIGreen}$file${Color_Off}"
        chmod $perms $file
        /bin/ls -ld $file | /bin/egrep --color=auto '[^ ]{9} '

    else
        echo -ne "${On_IRed}${BIWhite}ERROR: Invalid chmodAndShow() usage: "
        echo -e  "$0 line ${BASH_LINENO[0]}${Color_Off}"
    fi

}

testDir="${workingDir}/my_test_dir"
testFile="${testDir}/a_file"

# Now to kick things off...
setupDemo
startSlide

###
echoWhite "   #          #    #    #  #    #  #    #"
echoWhite "   #          #    ##   #  #    #   #  #"
echoWhite "   #          #    # #  #  #    #    ##"
echoWhite "   #          #    #  # #  #    #    ##"
echoWhite "   #          #    #   ##  #    #   #  #"
echoWhite "   ######     #    #    #   ####   #    #"
echo ""
echo ""
echoWhite "   #####   ######  #####   #    #   ####"
echoWhite "   #    #  #       #    #  ##  ##  #"
echoWhite "   #    #  #####   #    #  # ## #   ####"
echoWhite "   #####   #       #####   #    #       #"
echoWhite "   #       #       #   #   #    #  #    #"
echoWhite "   #       ######  #    #  #    #   ####"
echo ""
echo ""
echo -e "${BIGreen}https://github.com/briangerard/linux-permissions-demo${Color_Off}"
nextSlide

###
echoWhite "Permissions correspond to different actors:"
echo ""
echo -e "    ${BIGreen}User  ${BIYellow}Everyone else${Color_Off}"
echo -e "    ${BIGreen}/ \\   ${BIYellow}/ \\${Color_Off}"
echo -e "   -${BIGreen}rw-${BICyan}r--${BIYellow}r--${Color_Off}"
echo -e "       ${BICyan}\\ /${Color_Off}"
echo -e "       ${BICyan}Group${Color_Off}"
nextSlide

###
echoWhite "Each actor gets a triplet of bits, which can be treated as a binary number."
echo ""
echoWhite "   r--  ==  2^2  ==  4"
echoWhite "   -w-  ==  2^1  ==  2"
echoWhite "   --x  ==  2^0  ==  1"
echo ""
echo "         ...so..."
echo ""
echoWhite "   ---  ==  000  ==  0  "
echoWhite "   --x  ==  001  ==  1  "
echoWhite "   -w-  ==  010  ==  2  "
echoWhite "   -wx  ==  011  ==  3  "
echoWhite "   r--  ==  100  ==  4  "
echoWhite "   r-x  ==  101  ==  5  "
echoWhite "   rw-  ==  110  ==  6  "
echoWhite "   rwx  ==  111  ==  7  "
nextSlide

###
echoWhite "So putting those together..."
echo ""
echo -e "${BIGreen}         User: rw- == 110 == 6${Color_Off}"
echo -e "${BICyan}        Group: r-- == 100 == 4${Color_Off}"
echo -e "${BIYellow}Everyone else: r-- == 100 == 4${Color_Off}"
echo ""
echoWhite "        Makes:  rw-r--r-- == 644"
nextSlide

###
echoWhite "Here's what all the possible values look like on the file system:"
echoWhite "             (Only doing the user's permissions.)"
echo ""
for mode in "000" "100" "200" "300" "400" "500" "600" "700"
do
    chmodAndShow $mode $testFile
done
nextSlide

###
echoWhite "Some of the more common directory permissions..."
echo ""
for mode in 700 755 777
do
    chmodAndShow $mode $testDir
    echo ""
done
nextSlide

###
echoWhite "And for files..."
echo ""
for mode in 600 644 666 700 755
do
    chmodAndShow $mode $testFile
    echo ""
done
nextSlide

###
echoWhite "What about setuid, setgid, sticky bits?"
echo ""
echoWhite "           +---------------------------+----------------------------------+"
echoWhite "           |       On Directories      |             On Files             |"
echoWhite "  +--------+---------------------------+----------------------------------+"
echo -e   "  ${BIWhite}| ${BIGreen}Setuid ${BIWhite}| *Sometimes* subfiles and  | If file is a non-script          |${Color_Off}"
echoWhite "  |        | subdirs inherit ownership | executable, it runs as the owner |"
echoWhite "  +--------+---------------------------+----------------------------------+"
echo -e   "  ${BIWhite}| ${BIGreen}Setgid ${BIWhite}|   Subfiles and subdirs    | If file is a non-script          |${Color_Off}"
echoWhite "  |        |    inherit ownership      | executable, it runs with the     |"
echoWhite "  |        |                           | file's group ownership           |"
echoWhite "  +--------+---------------------------+----------------------------------+"
echo -e   "  ${BIWhite}| ${BIGreen}Sticky ${BIWhite}|   Subfiles and subdirs    | No effect.                       |${Color_Off}"
echoWhite "  |        |   may not be removed or   |                                  |"
echoWhite "  |        |   renamed except by the   |                                  |"
echoWhite "  |        |  owner or the superuser   |                                  |"
echoWhite "  +--------+---------------------------+----------------------------------+"
nextSlide

###
echoWhite "Think of each actor triplet as a bit:"
echo ""
echo -e "    ${BIGreen}Setuid  ${BIYellow}Sticky${Color_Off}"
echo -e "    ${BIGreen}/ \\   ${BIYellow}/ \\${Color_Off}"
echo -e "   -${BIGreen}---${BICyan}---${BIYellow}---${Color_Off}"
echo -e "       ${BICyan}\\ /${Color_Off}"
echo -e "       ${BICyan}Setgid${Color_Off}"
nextSlide

###
echoWhite "Keeping that association in mind gives us these:"
echo ""
echoWhite "   000  ==  0  == No special bits"
echoWhite "   001  ==  1  == Sticky bit"
echoWhite "   010  ==  2  == Setgid bit"
echoWhite "   011  ==  3  == Setgit + Sticky bits"
echoWhite "   100  ==  4  == Setuid bit"
echoWhite "   101  ==  5  == Setuid + Sticky bits"
echoWhite "   110  ==  6  == Setuid + Setgid bits"
echoWhite "   111  ==  7  == Setuid + Setgid + Sticky bits"
nextSlide

###
echoWhite "You set those by prepending to the regular mode."
echo ""
echoWhite "Sticky bit on a directory:"
chmodAndShow 1777 $testDir
echo ""
echoWhite "Setuid on an executable, perhaps:"
chmodAndShow 4755 $testFile
echo ""
echoWhite "Setgid bit on a directory:"
chmodAndShow 2775 $testDir
echo ""
echoWhite "Or maybe both Setgid and Sticky bits on a directory:"
chmodAndShow 3777 $testDir
nextSlide

###
echoWhite "  #####  #    #    ##    #    #  #    #"
echoWhite "    #    #    #   #  #   ##   #  #   #"
echoWhite "    #    ######  #    #  # #  #  ####"
echoWhite "    #    #    #  ######  #  # #  #  #"
echoWhite "    #    #    #  #    #  #   ##  #   #"
echoWhite "    #    #    #  #    #  #    #  #    #"
echo ""
echo ""
echoWhite "         #   #   ####   #    #   #"
echoWhite "          # #   #    #  #    #   #"
echoWhite "           #    #    #  #    #   #"
echoWhite "           #    #    #  #    #   #"
echoWhite "           #    #    #  #    #"
echoWhite "           #     ####    ####    #"
echo ""
echo ""
echo -e "${BIGreen}https://github.com/briangerard/linux-permissions-demo${Color_Off}"
nextSlide

###
echoWhite "          Thus Endeth the Slides"
insertLines

cleanupDemo
